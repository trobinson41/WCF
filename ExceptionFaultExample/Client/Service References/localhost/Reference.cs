//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.localhost {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DemoException", Namespace="http://schemas.datacontract.org/2004/07/BusinessObjects")]
    [System.SerializableAttribute()]
    public partial class DemoException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="localhost.IExceptionDemoService")]
    public interface IExceptionDemoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExceptionDemoService/ThrowException", ReplyAction="http://tempuri.org/IExceptionDemoService/ThrowExceptionResponse")]
        void ThrowException();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IExceptionDemoService/ThrowExceptionOneWay")]
        void ThrowExceptionOneWay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExceptionDemoService/ThrowSimpleFault", ReplyAction="http://tempuri.org/IExceptionDemoService/ThrowSimpleFaultResponse")]
        void ThrowSimpleFault();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExceptionDemoService/ThrowStronglyTypedFault", ReplyAction="http://tempuri.org/IExceptionDemoService/ThrowStronglyTypedFaultResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.localhost.DemoException), Action="http://tempuri.org/IExceptionDemoService/ThrowStronglyTypedFaultDemoExceptionFaul" +
            "t", Name="DemoException", Namespace="http://schemas.datacontract.org/2004/07/BusinessObjects")]
        void ThrowStronglyTypedFault();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExceptionDemoService/ThrowCultureSpecificFault", ReplyAction="http://tempuri.org/IExceptionDemoService/ThrowCultureSpecificFaultResponse")]
        void ThrowCultureSpecificFault();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExceptionDemoService/Foo", ReplyAction="http://tempuri.org/IExceptionDemoService/FooResponse")]
        void Foo();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExceptionDemoServiceChannel : Client.localhost.IExceptionDemoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExceptionDemoServiceClient : System.ServiceModel.ClientBase<Client.localhost.IExceptionDemoService>, Client.localhost.IExceptionDemoService {
        
        public ExceptionDemoServiceClient() {
        }
        
        public ExceptionDemoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExceptionDemoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExceptionDemoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExceptionDemoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ThrowException() {
            base.Channel.ThrowException();
        }
        
        public void ThrowExceptionOneWay() {
            base.Channel.ThrowExceptionOneWay();
        }
        
        public void ThrowSimpleFault() {
            base.Channel.ThrowSimpleFault();
        }
        
        public void ThrowStronglyTypedFault() {
            base.Channel.ThrowStronglyTypedFault();
        }
        
        public void ThrowCultureSpecificFault() {
            base.Channel.ThrowCultureSpecificFault();
        }
        
        public void Foo() {
            base.Channel.Foo();
        }
    }
}
